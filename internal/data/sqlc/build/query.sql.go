// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package sqlc

import (
	"context"
	"encoding/json"
)

const saveLoginSpy = `-- name: SaveLoginSpy :one
INSERT INTO spys (kind, ip, request)
VALUES ($1, $2, $3)
RETURNING id, ip, request, kind, created_at
`

type SaveLoginSpyParams struct {
	Kind    int16
	Ip      string
	Request json.RawMessage
}

func (q *Queries) SaveLoginSpy(ctx context.Context, arg SaveLoginSpyParams) (Spy, error) {
	row := q.db.QueryRowContext(ctx, saveLoginSpy, arg.Kind, arg.Ip, arg.Request)
	var i Spy
	err := row.Scan(
		&i.ID,
		&i.Ip,
		&i.Request,
		&i.Kind,
		&i.CreatedAt,
	)
	return i, err
}

const testSql = `-- name: TestSql :many
SELECT
FROM spys as s,
     users AS u
where s.created_by = u.id
`

type TestSqlRow struct {
}

func (q *Queries) TestSql(ctx context.Context) ([]TestSqlRow, error) {
	rows, err := q.db.QueryContext(ctx, testSql)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TestSqlRow
	for rows.Next() {
		var i TestSqlRow
		if err := rows.Scan(); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
