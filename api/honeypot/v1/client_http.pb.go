// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v4.22.2
// source: honeypot/v1/client.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationClientSpyLogin = "/api.honeypot.v1.Client/SpyLogin"

type ClientHTTPServer interface {
	// SpyLogin记录用户尝试通过对话框登陆的攻击
	SpyLogin(context.Context, *SpyLoginRequest) (*SpyLoginReply, error)
}

func RegisterClientHTTPServer(s *http.Server, srv ClientHTTPServer) {
	r := s.Route("/")
	r.POST("/login", _Client_SpyLogin0_HTTP_Handler(srv))
}

func _Client_SpyLogin0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpyLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClientSpyLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpyLogin(ctx, req.(*SpyLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpyLoginReply)
		return ctx.Result(200, reply)
	}
}

type ClientHTTPClient interface {
	SpyLogin(ctx context.Context, req *SpyLoginRequest, opts ...http.CallOption) (rsp *SpyLoginReply, err error)
}

type ClientHTTPClientImpl struct {
	cc *http.Client
}

func NewClientHTTPClient(client *http.Client) ClientHTTPClient {
	return &ClientHTTPClientImpl{client}
}

func (c *ClientHTTPClientImpl) SpyLogin(ctx context.Context, in *SpyLoginRequest, opts ...http.CallOption) (*SpyLoginReply, error) {
	var out SpyLoginReply
	pattern := "/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClientSpyLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
