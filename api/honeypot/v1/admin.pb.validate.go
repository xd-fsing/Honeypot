// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: honeypot/v1/admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on ListSpyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSpyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSpyRequestMultiError,
// or nil if none found.
func (m *ListSpyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Keyword

	if len(errors) > 0 {
		return ListSpyRequestMultiError(errors)
	}

	return nil
}

// ListSpyRequestMultiError is an error wrapping multiple validation errors
// returned by ListSpyRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSpyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpyRequestMultiError) AllErrors() []error { return m }

// ListSpyRequestValidationError is the validation error returned by
// ListSpyRequest.Validate if the designated constraints aren't met.
type ListSpyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpyRequestValidationError) ErrorName() string { return "ListSpyRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListSpyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpyRequestValidationError{}

// Validate checks the field values on ListSpyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSpyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSpyReplyMultiError, or
// nil if none found.
func (m *ListSpyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSpyReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSpyReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSpyReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSpyReplyMultiError(errors)
	}

	return nil
}

// ListSpyReplyMultiError is an error wrapping multiple validation errors
// returned by ListSpyReply.ValidateAll() if the designated constraints aren't met.
type ListSpyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpyReplyMultiError) AllErrors() []error { return m }

// ListSpyReplyValidationError is the validation error returned by
// ListSpyReply.Validate if the designated constraints aren't met.
type ListSpyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpyReplyValidationError) ErrorName() string { return "ListSpyReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSpyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpyReplyValidationError{}

// Validate checks the field values on ListSpyReply_Spy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSpyReply_Spy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpyReply_Spy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSpyReply_SpyMultiError, or nil if none found.
func (m *ListSpyReply_Spy) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpyReply_Spy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ip

	// no validation rules for Name

	// no validation rules for Password

	if len(errors) > 0 {
		return ListSpyReply_SpyMultiError(errors)
	}

	return nil
}

// ListSpyReply_SpyMultiError is an error wrapping multiple validation errors
// returned by ListSpyReply_Spy.ValidateAll() if the designated constraints
// aren't met.
type ListSpyReply_SpyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpyReply_SpyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpyReply_SpyMultiError) AllErrors() []error { return m }

// ListSpyReply_SpyValidationError is the validation error returned by
// ListSpyReply_Spy.Validate if the designated constraints aren't met.
type ListSpyReply_SpyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpyReply_SpyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpyReply_SpyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpyReply_SpyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpyReply_SpyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpyReply_SpyValidationError) ErrorName() string { return "ListSpyReply_SpyValidationError" }

// Error satisfies the builtin error interface
func (e ListSpyReply_SpyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpyReply_Spy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpyReply_SpyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpyReply_SpyValidationError{}
